{"version":3,"sources":["helper.js","App.js","serviceWorker.js","index.js"],"names":["translateNumBase","val","base","int","parseInt","decimal","toString","hex","toUpperCase","binary","DEFAULT_DATA","START_DATA","App","React","useState","inputs","setInputs","errorText","setErrorText","className","Object","entries","map","name","key","autoFocus","type","value","onChange","event","target","newInputs","err","message","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qQAAO,SAASA,EAAiBC,EAAKC,GACpC,IAAMC,EAAMC,SAASH,EAAKC,IAAS,GACnC,MAAO,CACLG,QAASF,EAAIG,SAAS,IACtBC,IAAKJ,EAAIG,SAAS,IAAIE,cACtBC,OAAQN,EAAIG,SAAS,I,UCDnBI,EAAe,CAAEL,QAAS,GAAIE,IAAK,GAAIE,OAAQ,IAC/CE,EAAa,CAAEN,QAAS,GAAIE,IAAK,GAAIE,OAAQ,IAwDpCG,MAtDf,WAAgB,IAAD,EACeC,IAAMC,SAASH,GAD9B,mBACNI,EADM,KACEC,EADF,OAEqBH,IAAMC,SAAS,IAFpC,mBAENG,EAFM,KAEKC,EAFL,KA8Bb,OACE,yBAAKC,UAAU,OACb,uBAAGA,UAAU,SAAb,oBACA,yBAAKA,UAAU,QACZC,OAAOC,QAAQN,GAAQO,KAAI,mCAAEC,EAAF,KAAQtB,EAAR,YAC1B,yBAAKkB,UAAU,MAAMK,IAAKD,GACxB,uBAAGJ,UAAU,aAAaI,GAC1B,2BACEJ,UAAU,YACVM,WAAS,EACTC,KAAK,OACLC,MAAO1B,EACP2B,SAAU,SAACC,GAAD,OAtCtB,SAAsBA,EAAON,GAC3B,IAAMI,EAAQE,EAAMC,OAAOH,MACvBI,EAAYrB,EAEhB,IACE,OAAQa,GACN,IAAK,MACHQ,EAAY/B,EAAiB2B,EAAO,IACpC,MACF,IAAK,SACHI,EAAY/B,EAAiB2B,EAAO,GACpC,MACF,IAAK,UACHI,EAAY/B,EAAiB2B,EAAO,KAKxC,MAAOK,GACPhB,EAAU,eAAKD,EAAN,eAAeQ,EAAOI,KAC/BT,EAAac,EAAIC,SAGnBjB,EAAUe,GAeqBG,CAAaL,EAAON,WAKjD,yBAAKJ,UAAU,iBACb,2BAAIF,MC3CQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlB,c","file":"static/js/main.c2e2a1f9.chunk.js","sourcesContent":["export function translateNumBase(val, base) {\n  const int = parseInt(val, base) || ''\n  return {\n    decimal: int.toString(10),\n    hex: int.toString(16).toUpperCase(),\n    binary: int.toString(2),\n  }\n}","import React from 'react'\nimport { translateNumBase } from './helper'\nimport './App.css'\n\nconst DEFAULT_DATA = { decimal: '', hex: '', binary: '' }\nconst START_DATA = { decimal: '', hex: '', binary: '' }\n\nfunction App() {\n  const [inputs, setInputs] = React.useState(START_DATA)\n  const [errorText, setErrorText] = React.useState('')\n\n  function handleChange(event, name) {\n    const value = event.target.value\n    let newInputs = DEFAULT_DATA\n\n    try {\n      switch (name) {\n        case 'hex':\n          newInputs = translateNumBase(value, 16)\n          break\n        case 'binary':\n          newInputs = translateNumBase(value, 2)\n          break\n        case 'decimal':\n          newInputs = translateNumBase(value, 10)\n          break\n        default:\n          break\n      }\n    } catch (err) {\n      setInputs({ ...inputs, [name]: value })\n      setErrorText(err.message)\n    }\n\n    setInputs(newInputs)\n  }\n\n  return (\n    <div className=\"app\">\n      <p className=\"title\">Number Convertor</p>\n      <div className=\"data\">\n        {Object.entries(inputs).map(([name, val]) => (\n          <div className=\"row\" key={name}>\n            <p className=\"data-name\">{name}</p>\n            <input\n              className=\"num-input\"\n              autoFocus\n              type=\"text\"\n              value={val}\n              onChange={(event) => handleChange(event, name)}\n            />\n          </div>\n        ))}\n      </div>\n      <div className=\"error-message\">\n        <p>{errorText}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}